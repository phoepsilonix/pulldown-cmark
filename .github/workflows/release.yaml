name: Release

on:
  push:
    tags:
      - 'v*'
      - 'commit-*'

jobs:
  release:
    name: Release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: pulldown-cmark-x86_64-linux.tar.xz
            asset_name: pulldown-cmark-x86_64-unknown-linux-musl
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            artifact_name: pulldown-cmark-aarch64-linux.tar.xz
            asset_name: pulldown-cmark-aarch64-unknown-linux-musl
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: pulldown-cmark-x86_64-linux.tar.xz
            asset_name: pulldown-cmark-x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: pulldown-cmark-aarch64-linux.tar.xz
            asset_name: pulldown-cmark-aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            artifact_name: pulldown-cmark-x86_64-pc-windows-gnu.zip
            asset_name: pulldown-cmark-x86_64-pc-windows-gnu
          - os: ubuntu-latest
            target: x86_64-apple-darwin
            artifact_name: pulldown-cmark-x86_64-x86_64-apple-darwin.tar.xz
            asset_name: pulldown-cmark-x86_64-x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
            artifact_name: pulldown-cmark-aarch64-apple-darwin.tar.xz
            asset_name: pulldown-cmark-aarch64-x86_64-apple-darwin

    runs-on: ${{ matrix.os }}
    env:
      SCCACHE_CACHE_SIZE: 1G
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"
      SCCACHE_DIR: /home/runner/.cache/sccache
      # SCCACHE_RECACHE: 1 # Uncomment this to clear cache, then comment
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true
          path: zig-release
      - name: Setup variables
        id: variables
        run: |
           VER=${GITHUB_REF##*/}
           VER=${VER#commit-}
           VER=${VER%-release}
           echo "version=${VER}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
        with:
          lfs: true
          path: pulldown-cmark
      - name: checkout tag
        run: |
          cd zig-release
          TAG=${GITHUB_REF##*/}
          git fetch --prune --unshallow --tags --no-recurse-submodules --filter=tree:0
          if [[ "$TAG" =~ ^commit- ]]; then
            COMMIT=$(git log -1 ${TAG#commit-} --pretty=%h)
            echo $TAG
            git tag $TAG -d || true
            git push origin $TAG -d || true
            base_tag=$(git describe --tags --abbrev=0 --always ${COMMIT})
            echo $base_tag
            base_tag=${base_tag/+*/}
            echo $base_tag
            COUNT=$(($(git rev-list --count $COMMIT)-$(git rev-list --count $base_tag)))
            if [[ $COUNT != 0 ]];then
              TAG=$base_tag-$COUNT-g$COMMIT
            else
              TAG=$base_tag
            fi
            echo "tag_name=" $TAG
            echo $TAG
            echo "tag_name=${TAG}" >> $GITHUB_OUTPUT
            echo "tag_commit=$(git log -1 --pretty=%H $TAG)" >> $GITHUB_OUTPUT
          else
            TAG=${{ steps.variables.outputs.version }}
            echo "tag_name=$(git describe --tags --always $TAG)" >> $GITHUB_OUTPUT
            echo "tag_commit=$(git log -1 --pretty=%H $TAG)" >> $GITHUB_OUTPUT
          fi
          cd ../pulldown-cmark
          echo $TAG | sed -e 's/-g.*$//g' -e 's/-/+/g' > version.txt
          cat version.txt
      - name: Generate release tag
        id: release_tag
        run: |
          base_tag=$(cat pulldown-cmark/version.txt)
          base_tag=${base_tag/+*/}
          echo "release_tag=$(cat pulldown-cmark/version.txt)" >> $GITHUB_OUTPUT
          echo "base_tag=${base_tag}" >> $GITHUB_OUTPUT
      - name: Generate release note
        id: release_note
        run: |
          {
          echo "release_note<<EOF"
          echo "$(cd zig-release && git log --pretty=format:"%C(yellow)commit %H%C(auto)%d%nAuthor: %an%nDate:   %ad%n%n%s%n%n%b" -1 ${{ steps.variables.outputs.version }})"
          echo "EOF"
          } >> $GITHUB_OUTPUT
      - name: test
        run: |
          echo "1: ${{ steps.release_tag.outputs.base_tag }}"
          echo "1: ${{ steps.release_tag.outputs.release_tag }}"
          echo "2: ${{ steps.release_note.outputs.release_note }}"
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.6
        with:
          version: "v0.8.2"
      - name: Rust cache rustup
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/.rustup
            /home/runner/.cargo
            /home/runner/.cache
          key: ${{ matrix.target }}-pulldown-cmark-${{ steps.release_tag.outputs.base_tag }}
          restore-keys: ${{ matrix.target }}-pulldown-cmark-

      - name: Install stable toolchain
        shell: bash
        run: |
          export PATH="~/.cargo/bin:$PATH"
          which rustup || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "Running Rust program for ${{ matrix.os }}"
          curl -Lo mold.tar.gz https://github.com/rui314/mold/releases/download/v2.34.1/mold-2.34.1-x86_64-linux.tar.gz
          sudo tar -xf mold.tar.gz --strip-component=1 -C /usr/local/

          # Add Rust target
          rustup update
          #rustup override set nightly
          rustup target add ${{ matrix.target }}
          if [[ ${{ matrix.target }} =~ linux ]];then
            rustup component add rust-src
            #rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
            #mkdir -p zig
            #curl -LZ \
            #  https://ziglang.org/download/0.13.0/zig-linux-x86_64-0.13.0.tar.xz \
            #  |tar xJ --strip-component=1 -C zig
            #sudo mv zig /usr/local/
            #echo "/usr/local/zig" >> $GITHUB_PATH
          fi

      - name: Cross build with all features
        shell: bash
        run: |
          cd pulldown-cmark
          which rustc
          source $HOME/.cargo/env || PATH=$HOME/.cargo/bin:$PATH
          which rustc
          rm $HOME/.cargo/config* -f
          rm $HOME/.cargo/Cross.toml -f
          if [[ ${{ matrix.target }} =~ apple ]];then
            docker run \
              --volume "${PWD}":/root/src \
              --workdir /root/src \
              --name rust-builder \
              -d joseluisq/rust-linux-darwin-builder:1.82.0 \
              sleep infinity
            docker exec rust-builder rm /root/.cargo/config -f
            docker cp config.toml rust-builder:/root/.cargo/config.toml
            #docker exec rust-builder rustup toolchain install nightly-x86_64-unknown-linux-gnu
            #docker exec rust-builder rustup component add rust-src
            #docker exec rust-builder rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
            docker exec rust-builder sh -c "cargo build --release --target ${{ matrix.target }}"
              #sh -c "rustup run nightly cargo build --release --target ${{ matrix.target }} || cargo build --release --target ${{ matrix.target }}"
            docker exec rust-builder ${{ matrix.target }}22.4-strip -v target/${{ matrix.target }}/release/pulldown-cmark
            docker stop rust-builder
            docker rm rust-builder
            sudo chown $USER:$USER -R ${PWD}/*
          elif [[ ${{ matrix.target }} =~ linux ]];then
            cargo install cross
            cargo install cargo-zigbuild
            cp config.toml $HOME/.cargo/ -f
            cp Cross.toml $HOME/.cargo/ -f
            #rustup run nightly cross build --release --target ${{ matrix.target }} --all-features --verbose --manifest-path ./Cargo.toml || \
            cross build --release --target ${{ matrix.target }} --all-features --verbose --manifest-path ./Cargo.toml
          #  cp config.toml $HOME/.cargo/ -f
          #  cargo install cross
          #  cargo install cargo-zigbuild
          #cargo +nightly zigbuild --release --target ${{ matrix.target }} --all-features --verbose --manifest-path ./Cargo.toml || \
          #  cargo +stable zigbuild --release --target ${{ matrix.target }} --all-features --verbose --manifest-path ./Cargo.toml
          else
            cargo install cross
            cargo install cargo-zigbuild
            cp config.toml $HOME/.cargo/ -f
            cp Cross.toml $HOME/.cargo/ -f
            #rustup run nightly cross build --release --target ${{ matrix.target }} --all-features --verbose --manifest-path ./Cargo.toml || \
            cross build --release --target ${{ matrix.target }} --all-features --verbose --manifest-path ./Cargo.toml
          fi

      - name: Build archive
        shell: bash
        run: |
          cd pulldown-cmark
          binary_name="pulldown-cmark"

          dirname="$binary_name-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]; then
            mv "target/${{ matrix.target }}/release/$binary_name.exe" "$dirname"
          else
            mv "target/${{ matrix.target }}/release/$binary_name" "$dirname"
          fi

          if [ "${{ matrix.target }}" == "x86_64-pc-windows-gnu" ]; then
            7z a ../"$dirname.zip" "$dirname"
            7z l ../"$dirname.zip"
            echo "ASSET=$dirname.zip" >> $GITHUB_ENV
          else
            tar -czf ../"$dirname.tar.gz" "$dirname"
            tar tvf ../"$dirname.tar.gz"
            echo "ASSET=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "${{ steps.release_tag.outputs.release_tag }}"
          name: "${{ steps.release_tag.outputs.release_tag }}"
          body: "${{ steps.release_note.outputs.release_note }}"
          files: |
            ${{ env.ASSET }}
